type: edu
files:
- name: src/asciimirror/Main.java
  visible: true
  text: |-
    package asciimirror;

    public class Main {
        // public static void main(String[] args) {
        //     System.out.println(" ");
        //     System.out.println("                    _______ ");
        //     System.out.println("                   < hello >");
        //     System.out.println("                    ------- ");
        //     System.out.println("             ^__^   /        ");
        //     System.out.println("     _______/(oo)  /         ");
        //     System.out.println("/\\/\\(       /(__)            ");
        //     System.out.println("    | w----||                ");
        //     System.out.println("    ||     ||                ");
        // }
         public static void main(String[] args) {
            System.out.println("                    _______ ");
            System.out.println("                   < hello >");
            System.out.println("                    ------- ");
            System.out.println("            ^__^   /        ");
            System.out.println("    _______/(oo)  /         ");
            System.out.println("/\\/(       /(__)            ");
            System.out.println("   | w----||                ");
            System.out.println("   ||     ||                ");
        }
    }
  learner_created: false
- name: test/MirrorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    public class MirrorTest extends StageTest {

      String[] test_data = {
              " ","test","C:\\Users\\Examples\\test.txt","/home/username/test.txt"
      };

      @DynamicTest(data = "test_data")
      CheckResult testSolution(String input) {
        TestedProgram pr = new TestedProgram();
        String output = pr.start().strip().toLowerCase();
        String[] strings = output.strip().split("\n");
        List<String> list = new ArrayList<>(Arrays.asList(strings));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=1 || !list.get(0).contains("file path")){
          throw new WrongAnswer("When the program just started, output should contain exactly 1 non-empty line " +
                  "with \"file path\" substring");
        }
        output = pr.execute(input);
        strings = output.split("\n");
        list = new ArrayList<>(Arrays.asList(strings));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=6 || !list.get(0).contains(input)){
          throw new WrongAnswer("When the user entered any string, program should output exactly 6 non-empty" +
                  " lines, first one should contain user's input, other 5 ones should contain ascii cow's picture");
        }
        List<String> correctList = new ArrayList<>(Arrays.asList(
                "            ^__^",
                "    _______/(oo)",
                "/\\/(       /(__)",
                "   | w----||    ",
                "   ||     ||    "));
        for (int i=1;i<list.size();i++){
          if(!list.get(i).equals(correctList.get(i-1))){
            throw new WrongAnswer("All the printed lines in ascii cow's picture should be equal to lines in the " +
                    " example. Make sure, that you've not ignored whitespaces at the beginning and at the end of each line");
          }
        }
        if(!pr.isFinished()){
          throw new WrongAnswer("Program should finish after outputting the picture");
        }
        return CheckResult.correct();
      }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/260/stages/1317/implement#comment
status: Failed
feedback:
  message: "Wrong answer in test #1\n\nWhen the user entered any string, program should\
    \ output exactly 6 non-empty lines, first one should contain user&#39;s input,\
    \ other 5 ones should contain ascii cow&#39;s picture\n\nPlease find below the\
    \ output of your program during this failed test.\nNote that the &#39;&gt;&#39;\
    \ character indicates the beginning of the input line.\n\n---\n\nInput the file\
    \ path:\n&gt;  \n\n            ^__^\n    _______/(oo)\n/\\/(       /(__)\n   |\
    \ w----||\n   ||     ||"
  time: "Sun, 09 Apr 2023 15:42:46 UTC"
record: -1
